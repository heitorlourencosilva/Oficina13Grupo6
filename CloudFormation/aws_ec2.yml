Resources:
    ElasticLoadBalancingV2LoadBalancer:
        Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
        Properties:
            Name: "apl-humhub-ecs-fargate-service"
            Scheme: "internet-facing"
            Type: "application"
            Subnets: 
              - !Ref EC2Subnet2
              - !Ref EC2Subnet3
            SecurityGroups: 
              - !Ref EC2SecurityGroup2
            IpAddressType: "ipv4"
            LoadBalancerAttributes: 
              - 
                Key: "access_logs.s3.enabled"
                Value: "false"
              - 
                Key: "idle_timeout.timeout_seconds"
                Value: "60"
              - 
                Key: "deletion_protection.enabled"
                Value: "false"
              - 
                Key: "routing.http2.enabled"
                Value: "true"
              - 
                Key: "routing.http.drop_invalid_header_fields.enabled"
                Value: "false"
              - 
                Key: "routing.http.xff_client_port.enabled"
                Value: "false"
              - 
                Key: "routing.http.preserve_host_header.enabled"
                Value: "false"
              - 
                Key: "routing.http.xff_header_processing.mode"
                Value: "append"
              - 
                Key: "load_balancing.cross_zone.enabled"
                Value: "true"
              - 
                Key: "routing.http.desync_mitigation_mode"
                Value: "defensive"
              - 
                Key: "waf.fail_open.enabled"
                Value: "false"
              - 
                Key: "routing.http.x_amzn_tls_version_and_cipher_suite.enabled"
                Value: "false"

    ElasticLoadBalancingV2Listener:
        Type: "AWS::ElasticLoadBalancingV2::Listener"
        Properties:
            LoadBalancerArn: !Ref ElasticLoadBalancingV2LoadBalancer
            Port: 80
            Protocol: "HTTP"
            DefaultActions: 
              - 
                Order: 1
                TargetGroupArn: !Ref ElasticLoadBalancingV2TargetGroup
                Type: "forward"

    # EC2SecurityGroup:
    #     Type: "AWS::EC2::SecurityGroup"
    #     Properties:
    #         GroupDescription: "Permite enviar e receber emails da aplicacao humhub"
    #         GroupName: "SG_email_humhub_tecnoct"
    #         VpcId: !Ref EC2VPC
    #         SecurityGroupIngress: 
    #           - 
    #             CidrIp: !GetAtt EC2VPC.CidrBlock
    #             FromPort: 25
    #             IpProtocol: "tcp"
    #             ToPort: 25
    #           - 
    #             CidrIp: !GetAtt EC2VPC.CidrBlock
    #             FromPort: 465
    #             IpProtocol: "tcp"
    #             ToPort: 465
    #         SecurityGroupEgress: 
    #           - 
    #             CidrIp: "0.0.0.0/0"
    #             IpProtocol: "-1"
    #           - 
    #             CidrIpv6: "::/0"
    #             IpProtocol: "-1"

    EC2SecurityGroup2:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "Grupo de Seguranca para o APL do Humhub"
            GroupName: "SG_ELB_humhub"
            Tags: 
              - 
                Key: "projeto"
                Value: "projeto13_grupo06-humhub"
            VpcId: !Ref EC2VPC
            SecurityGroupIngress: 
              - 
                CidrIp: "0.0.0.0/0"
                FromPort: 80
                IpProtocol: "tcp"
                ToPort: 80
              - 
                CidrIp: "0.0.0.0/0"
                FromPort: 443
                IpProtocol: "tcp"
                ToPort: 443
            SecurityGroupEgress: 
              - 
                CidrIp: "0.0.0.0/0"
                IpProtocol: "-1"

    # EC2SecurityGroup3:
    #     Type: "AWS::EC2::SecurityGroup"
    #     Properties:
    #         GroupDescription: "Permite controlar o acesso ao endpoint"
    #         GroupName: "security-group-vpc-endpoint-humhub-tecnoct"
    #         Tags: 
    #           - 
    #             Key: "projeto"
    #             Value: "projeto13_grupo06-humhub"
    #         VpcId: !Ref EC2VPC
    #         SecurityGroupIngress: 
    #           - 
    #             CidrIp: !GetAtt EC2VPC.CidrBlock
    #             FromPort: 80
    #             IpProtocol: "tcp"
    #             ToPort: 80
    #           - 
    #             CidrIp: !GetAtt EC2VPC.CidrBlock
    #             FromPort: 443
    #             IpProtocol: "tcp"
    #             ToPort: 443
    #         SecurityGroupEgress: 
    #           - 
    #             CidrIp: "0.0.0.0/0"
    #             IpProtocol: "-1"
    #           - 
    #             CidrIpv6: "::/0"
    #             IpProtocol: "-1"

    # EC2SecurityGroup4:
    #     Type: "AWS::EC2::SecurityGroup"
    #     Properties:
    #         GroupDescription: "Grupo de Seguranca para o APL do Humhub"
    #         GroupName: "SG_ALB_humhub"
    #         Tags: 
    #           - 
    #             Key: "projeto"
    #             Value: "projeto13_grupo06-humhub"
    #         VpcId: !Ref EC2VPC
    #         SecurityGroupIngress: 
    #           - 
    #             CidrIp: "0.0.0.0/16"
    #             FromPort: 80
    #             IpProtocol: "tcp"
    #             ToPort: 80
    #           - 
    #             CidrIp: "0.0.0.0/16"
    #             FromPort: 443
    #             IpProtocol: "tcp"
    #             ToPort: 443
    #         SecurityGroupEgress: 
    #           - 
    #             CidrIp: "0.0.0.0/16"
    #             IpProtocol: "-1"
    #           - 
    #             CidrIpv6: "::/0"
    #             IpProtocol: "-1"

    # EC2SecurityGroup5:
    #     Type: "AWS::EC2::SecurityGroup"
    #     Properties:
    #         GroupDescription: "Created by RDS management console"
    #         GroupName: "sg_db_TecnoCT"
    #         VpcId: !Ref EC2VPC
    #         SecurityGroupIngress: 
    #           - 
    #             CidrIp: "189.12.149.202/32"
    #             FromPort: !GetAtt RDSDBInstance.Endpoint.Port
    #             IpProtocol: "tcp"
    #             ToPort: !GetAtt RDSDBInstance.Endpoint.Port
    #           - 
    #             CidrIp: "0.0.0.0/0"
    #             FromPort: !GetAtt RDSDBInstance.Endpoint.Port
    #             IpProtocol: "tcp"
    #             ToPort: !GetAtt RDSDBInstance.Endpoint.Port
    #         SecurityGroupEgress: 
    #           - 
    #             CidrIp: "0.0.0.0/0"
    #             IpProtocol: "-1"
    #           - 
    #             CidrIpv6: "::/0"
    #             IpProtocol: "-1"

    EC2SecurityGroup6:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "Security Group para tasks do humhub"
            GroupName: "sg_web_humhub"
            VpcId: !Ref EC2VPC
            SecurityGroupIngress: 
              - 
                CidrIp: "0.0.0.0/0"
                FromPort: 80
                IpProtocol: "tcp"
                ToPort: 80
              - 
                CidrIpv6: "::/0"
                FromPort: 80
                IpProtocol: "tcp"
                ToPort: 80
              - 
                CidrIp: "0.0.0.0/0"
                FromPort: 443
                IpProtocol: "tcp"
                ToPort: 443
              - 
                CidrIpv6: "::/0"
                FromPort: 443
                IpProtocol: "tcp"
                ToPort: 443
            SecurityGroupEgress: 
              - 
                CidrIp: "0.0.0.0/0"
                IpProtocol: "-1"
              - 
                CidrIpv6: "::/0"
                IpProtocol: "-1"

    EC2SecurityGroupEFS:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: ""
            GroupName: ""
            Tags: 
              - 
                Key: "projeto"
                Value: "projeto13_grupo06-humhub"
            VpcId: !Ref EC2VPC
            SecurityGroupIngress: 
              - 
                CidrIp: !GetAtt EC2VPC.CidrBlock
                FromPort: 2049
                IpProtocol: "tcp"
                ToPort: 2049
            SecurityGroupEgress: 
              - 
                CidrIp: "0.0.0.0/0"
                IpProtocol: "-1"
              - 
                CidrIpv6: "::/0"
                IpProtocol: "-1"

    ElasticLoadBalancingV2TargetGroup:
        Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
        Properties:
            HealthCheckIntervalSeconds: 30
            HealthCheckPath: "/user/auth/login"
            Port: 80
            Protocol: "HTTP"
            HealthCheckPort: "traffic-port"
            HealthCheckProtocol: "HTTP"
            HealthCheckTimeoutSeconds: 5
            UnhealthyThresholdCount: 2
            TargetType: "ip"
            Matcher: 
                HttpCode: "200"
            HealthyThresholdCount: 5
            VpcId: !Ref EC2VPC
            Name: "gd-humhub-tecnoct"
            HealthCheckEnabled: true
            TargetGroupAttributes: 
              - 
                Key: "target_group_health.unhealthy_state_routing.minimum_healthy_targets.count"
                Value: "1"
              - 
                Key: "stickiness.enabled"
                Value: "false"
              - 
                Key: "target_group_health.unhealthy_state_routing.minimum_healthy_targets.percentage"
                Value: "off"
              - 
                Key: "deregistration_delay.timeout_seconds"
                Value: "300"
              - 
                Key: "target_group_health.dns_failover.minimum_healthy_targets.count"
                Value: "1"
              - 
                Key: "stickiness.app_cookie.cookie_name"
                Value: ""
              - 
                Key: "stickiness.type"
                Value: "lb_cookie"
              - 
                Key: "stickiness.lb_cookie.duration_seconds"
                Value: "86400"
              - 
                Key: "slow_start.duration_seconds"
                Value: "0"
              - 
                Key: "stickiness.app_cookie.duration_seconds"
                Value: "86400"
              - 
                Key: "target_group_health.dns_failover.minimum_healthy_targets.percentage"
                Value: "off"
              - 
                Key: "load_balancing.cross_zone.enabled"
                Value: "use_load_balancer_configuration"
              - 
                Key: "load_balancing.algorithm.type"
                Value: "round_robin"
            Targets: 
              - 
                Id: "10.0.3.165"
                Port: 80
                AvailabilityZone: !GetAtt EC2Subnet.AvailabilityZone
              - 
                Id: "10.0.4.203"
                Port: 80
                AvailabilityZone: !GetAtt EC2Subnet2.AvailabilityZone

    # EC2NetworkInterface:
    #     Type: "AWS::EC2::NetworkInterface"
    #     Properties:
    #         Description: !Sub "arn:aws:ecs:${AWS::Region}:891856990808:attachment/3243b7ea-0f3d-4e5d-bb15-2dd64b7a6559"
    #         PrivateIpAddress: "10.0.3.165"
    #         PrivateIpAddresses: 
    #           - 
    #             PrivateIpAddress: "10.0.3.165"
    #             Primary: true
    #         SubnetId: !Ref EC2Subnet
    #         SourceDestCheck: true
    #         Tags: 
    #           - 
    #             Key: "aws:ecs:clusterName"
    #             Value: !Ref ECSCluster
    #           - 
    #             Key: "aws:ecs:serviceName"
    #             Value: !GetAtt ECSService.Name
    #         GroupSet: 
    #           - !Ref EC2SecurityGroup6

    EC2NetworkInterface2:
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: !Sub "ELB app/${ElasticLoadBalancingV2LoadBalancer.LoadBalancerName}/76647e729d1ca177"
            PrivateIpAddress: "10.0.1.16"
            PrivateIpAddresses: 
              - 
                PrivateIpAddress: "10.0.1.16"
                Primary: true
            SubnetId: !Ref EC2Subnet3
            SourceDestCheck: true
            GroupSet: 
              - !Sub "${ElasticLoadBalancingV2LoadBalancer.SecurityGroups}"

    # EC2NetworkInterface3:
    #     Type: "AWS::EC2::NetworkInterface"
    #     Properties:
    #         Description: !Sub "arn:aws:ecs:${AWS::Region}:891856990808:attachment/f1f47f32-aecf-48d0-b045-900db0b9fcb9"
    #         PrivateIpAddress: "10.0.1.176"
    #         PrivateIpAddresses: 
    #           - 
    #             PrivateIpAddress: "10.0.1.176"
    #             Primary: true
    #         SubnetId: !Ref EC2Subnet3
    #         SourceDestCheck: true
    #         Tags: 
    #           - 
    #             Key: "aws:ecs:clusterName"
    #             Value: !Ref ECSCluster
    #         GroupSet: 
    #           - !Ref EC2SecurityGroup6

    # EC2NetworkInterface4:
    #     Type: "AWS::EC2::NetworkInterface"
    #     Properties:
    #         Description: "RDSNetworkInterface"
    #         PrivateIpAddress: "10.0.1.32"
    #         PrivateIpAddresses: 
    #           - 
    #             PrivateIpAddress: "10.0.1.32"
    #             Primary: true
    #         SubnetId: !Ref EC2Subnet3
    #         SourceDestCheck: true
    #         GroupSet: 
    #           - !Ref EC2SecurityGroup5

    # EC2NetworkInterface5:
    #     Type: "AWS::EC2::NetworkInterface"
    #     Properties:
    #         Description: !Sub "EFS mount target for ${EFSFileSystem2} (${EFSMountTarget4})"
    #         PrivateIpAddress: !GetAtt EFSMountTarget4.IpAddress
    #         PrivateIpAddresses: 
    #           - 
    #             PrivateIpAddress: !GetAtt EFSMountTarget4.IpAddress
    #             Primary: true
    #         SubnetId: !Ref EC2Subnet
    #         SourceDestCheck: true
    #         GroupSet: 
    #           - "sg-00cac7cbb14e0853c"

    # EC2NetworkInterface6:
    #     Type: "AWS::EC2::NetworkInterface"
    #     Properties:
    #         Description: !Sub "Interface for NAT Gateway ${EC2NatGateway2}"
    #         PrivateIpAddress: "10.0.1.165"
    #         PrivateIpAddresses: 
    #           - 
    #             PrivateIpAddress: "10.0.1.165"
    #             Primary: true
    #         SubnetId: !Ref EC2Subnet3
    #         SourceDestCheck: false

    # EC2NetworkInterface7:
    #     Type: "AWS::EC2::NetworkInterface"
    #     Properties:
    #         Description: !Sub "EFS mount target for ${EFSFileSystem} (${EFSMountTarget2})"
    #         PrivateIpAddress: !GetAtt EFSMountTarget2.IpAddress
    #         PrivateIpAddresses: 
    #           - 
    #             PrivateIpAddress: !GetAtt EFSMountTarget2.IpAddress
    #             Primary: true
    #         SubnetId: !Ref EC2Subnet
    #         SourceDestCheck: true
    #         GroupSet: 
    #           - "sg-00cac7cbb14e0853c"

    # EC2NetworkInterface8:
    #     Type: "AWS::EC2::NetworkInterface"
    #     Properties:
    #         Description: !Sub "Interface for NAT Gateway ${EC2NatGateway}"
    #         PrivateIpAddress: "10.0.2.191"
    #         PrivateIpAddresses: 
    #           - 
    #             PrivateIpAddress: "10.0.2.191"
    #             Primary: true
    #         SubnetId: !Ref EC2Subnet2
    #         SourceDestCheck: false

    # EC2NetworkInterface9:
    #     Type: "AWS::EC2::NetworkInterface"
    #     Properties:
    #         Description: !Sub "EFS mount target for ${EFSFileSystem} (${EFSMountTarget})"
    #         PrivateIpAddress: !GetAtt EFSMountTarget.IpAddress
    #         PrivateIpAddresses: 
    #           - 
    #             PrivateIpAddress: !GetAtt EFSMountTarget.IpAddress
    #             Primary: true
    #         SubnetId: !Ref EC2Subnet4
    #         SourceDestCheck: true
    #         GroupSet: 
    #           - "sg-00cac7cbb14e0853c"

    # EC2NetworkInterface10:
    #     Type: "AWS::EC2::NetworkInterface"
    #     Properties:
    #         Description: !Sub "arn:aws:ecs:${AWS::Region}:891856990808:attachment/d7a884f4-5618-44ed-9125-1af62db43c1d"
    #         PrivateIpAddress: "10.0.4.203"
    #         PrivateIpAddresses: 
    #           - 
    #             PrivateIpAddress: "10.0.4.203"
    #             Primary: true
    #         SubnetId: !Ref EC2Subnet4
    #         SourceDestCheck: true
    #         Tags: 
    #           - 
    #             Key: "aws:ecs:serviceName"
    #             Value: !GetAtt ECSService.Name
    #           - 
    #             Key: "aws:ecs:clusterName"
    #             Value: !Ref ECSCluster
    #         GroupSet: 
    #           - !Ref EC2SecurityGroup6

    # EC2NetworkInterface11:
    #     Type: "AWS::EC2::NetworkInterface"
    #     Properties:
    #         Description: !Sub "arn:aws:ecs:${AWS::Region}:891856990808:attachment/88722055-9e6c-4fa5-8a85-2530e5311e63"
    #         PrivateIpAddress: "10.0.2.145"
    #         PrivateIpAddresses: 
    #           - 
    #             PrivateIpAddress: "10.0.2.145"
    #             Primary: true
    #         SubnetId: !Ref EC2Subnet2
    #         SourceDestCheck: true
    #         Tags: 
    #           - 
    #             Key: "aws:ecs:clusterName"
    #             Value: !Ref ECSCluster
    #         GroupSet: 
    #           - !Ref EC2SecurityGroup6

    # EC2NetworkInterface12:
    #     Type: "AWS::EC2::NetworkInterface"
    #     Properties:
    #         Description: !Sub "EFS mount target for ${EFSFileSystem2} (${EFSMountTarget3})"
    #         PrivateIpAddress: !GetAtt EFSMountTarget3.IpAddress
    #         PrivateIpAddresses: 
    #           - 
    #             PrivateIpAddress: !GetAtt EFSMountTarget3.IpAddress
    #             Primary: true
    #         SubnetId: !Ref EC2Subnet4
    #         SourceDestCheck: true
    #         GroupSet: 
    #           - "sg-00cac7cbb14e0853c"

    EC2NetworkInterface13:
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: !Sub "ELB app/${ElasticLoadBalancingV2LoadBalancer.LoadBalancerName}/76647e729d1ca177"
            PrivateIpAddress: "10.0.2.106"
            PrivateIpAddresses: 
              - 
                PrivateIpAddress: "10.0.2.106"
                Primary: true
            SubnetId: !Ref EC2Subnet2
            SourceDestCheck: true
            GroupSet: 
              - !Sub "${ElasticLoadBalancingV2LoadBalancer.SecurityGroups}"

