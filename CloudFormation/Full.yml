Resources:
# TODO VPC
    EC2VPC:
        Type: "AWS::EC2::VPC"
        Properties:
            CidrBlock: "10.0.0.0/16"
            EnableDnsSupport: true
            EnableDnsHostnames: true
            InstanceTenancy: "default"
            Tags: 
              - 
                Key: "Name"
                Value: "VPC_TecnoCT"
              - 
                Key: "projeto"
                Value: "oficina13_grupo06_humhub"

    EC2VPCCidrBlock:
        Type: "AWS::EC2::VPCCidrBlock"
        Properties:
            VpcId: !Ref EC2VPC
            AmazonProvidedIpv6CidrBlock: true

    EC2Subnet:
        Type: "AWS::EC2::Subnet"
        Properties:
            AvailabilityZone: !GetAtt EC2Subnet3.AvailabilityZone
            CidrBlock: "10.0.3.0/24"
            VpcId: !Ref EC2VPC
            MapPublicIpOnLaunch: false
            Tags: 
              - 
                Key: "projeto"
                Value: "oficina13_grupo06_humhub"
              - 
                Key: "Name"
                Value: "subnet_TecnoCT_privada01"

    EC2Subnet2:
        Type: "AWS::EC2::Subnet"
        Properties:
            AvailabilityZone: !GetAtt EC2Subnet4.AvailabilityZone
            CidrBlock: "10.0.2.0/24"
            VpcId: !Ref EC2VPC
            MapPublicIpOnLaunch: false
            Tags: 
              - 
                Key: "projeto"
                Value: "oficina13_grupo06_humhub"
              - 
                Key: "Name"
                Value: "subnet_TecnoCT_publica02"

    EC2Subnet3:
        Type: "AWS::EC2::Subnet"
        Properties:
            AvailabilityZone: !Sub "${AWS::Region}a"
            CidrBlock: "10.0.1.0/24"
            VpcId: !Ref EC2VPC
            MapPublicIpOnLaunch: false
            Tags: 
              - 
                Key: "projeto"
                Value: "oficina13_grupo06_humhub"
              - 
                Key: "Name"
                Value: "subnet_TecnoCT_publica01"

    EC2Subnet4:
        Type: "AWS::EC2::Subnet"
        Properties:
            AvailabilityZone: !Sub "${AWS::Region}b"
            CidrBlock: "10.0.4.0/24"
            VpcId: !Ref EC2VPC
            MapPublicIpOnLaunch: false
            Tags: 
              - 
                Key: "projeto"
                Value: "oficina13_grupo06_humhub"
              - 
                Key: "Name"
                Value: "subnet_TecnoCT_privada02"

    EC2InternetGateway:
        Type: "AWS::EC2::InternetGateway"
        Properties:
            Tags: 
              - 
                Key: "Name"
                Value: "internet_gateway_TecnoCT"
              - 
                Key: "projeto"
                Value: "oficina13_grupo06_humhub"
                
    EC2DHCPOptions:
        Type: "AWS::EC2::DHCPOptions"
        Properties:
            DomainName: "ec2.internal"

    EC2VPCDHCPOptionsAssociation:
        Type: "AWS::EC2::VPCDHCPOptionsAssociation"
        Properties:
            DhcpOptionsId: !Ref EC2DHCPOptions
            VpcId: !Ref EC2VPC

    EC2NetworkAcl2:
        Type: "AWS::EC2::NetworkAcl"
        Properties:
            VpcId: !Ref EC2VPC
            Tags: 
              - 
                Key: "Name"
                Value: "ACL_Humhub_publica"
              - 
                Key: "projeto"
                Value: "projeto13_grupo06-humhub"

    EC2NetworkAclEntry:
        Type: "AWS::EC2::NetworkAclEntry"
        Properties:
            CidrBlock: "0.0.0.0/0"
            Egress: true
            NetworkAclId: !Ref EC2NetworkAcl2
            Protocol: -1
            RuleAction: "allow"
            RuleNumber: 100

    EC2RouteTable2:
        Type: "AWS::EC2::RouteTable"
        Properties:
            VpcId: !Ref EC2VPC
            Tags: 
              - 
                Key: "Name"
                Value: "rt_TecnoCT_publica"
              - 
                Key: "projeto"
                Value: "oficina13_grupo06_humhub"

    EC2Route:
        Type: "AWS::EC2::Route"
        Properties:
            DestinationCidrBlock: "0.0.0.0/0"
            GatewayId: !Ref EC2InternetGateway
            RouteTableId: !Ref EC2RouteTable2

    EC2Route2:
        Type: "AWS::EC2::Route"
        Properties:
            DestinationIpv6CidrBlock: "::/0"
            GatewayId: !Ref EC2InternetGateway
            RouteTableId: !Ref EC2RouteTable2

    EC2VPCGatewayAttachment:
        Type: "AWS::EC2::VPCGatewayAttachment"
        Properties:
            InternetGatewayId: !Ref EC2InternetGateway
            VpcId: !Ref EC2VPC

    EC2SubnetRouteTableAssociation:
        Type: "AWS::EC2::SubnetRouteTableAssociation"
        Properties:
            RouteTableId: !Ref EC2RouteTable2
            SubnetId: !Ref EC2Subnet2

    EC2SubnetRouteTableAssociation2:
        Type: "AWS::EC2::SubnetRouteTableAssociation"
        Properties:
            RouteTableId: !Ref EC2RouteTable2
            SubnetId: !Ref EC2Subnet3

# TODO EC2
    ElasticLoadBalancingV2LoadBalancer:
        Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
        Properties:
            Name: "apl-humhub-ecs-fargate-service"
            Scheme: "internet-facing"
            Type: "application"
            Subnets: 
              - !Ref EC2Subnet2
              - !Ref EC2Subnet3
            SecurityGroups: 
              - !Ref EC2SecurityGroup2
            IpAddressType: "ipv4"
            LoadBalancerAttributes: 
              - 
                Key: "access_logs.s3.enabled"
                Value: "false"
              - 
                Key: "idle_timeout.timeout_seconds"
                Value: "60"
              - 
                Key: "deletion_protection.enabled"
                Value: "false"
              - 
                Key: "routing.http2.enabled"
                Value: "true"
              - 
                Key: "routing.http.drop_invalid_header_fields.enabled"
                Value: "false"
              - 
                Key: "routing.http.xff_client_port.enabled"
                Value: "false"
              - 
                Key: "routing.http.preserve_host_header.enabled"
                Value: "false"
              - 
                Key: "routing.http.xff_header_processing.mode"
                Value: "append"
              - 
                Key: "load_balancing.cross_zone.enabled"
                Value: "true"
              - 
                Key: "routing.http.desync_mitigation_mode"
                Value: "defensive"
              - 
                Key: "waf.fail_open.enabled"
                Value: "false"
              - 
                Key: "routing.http.x_amzn_tls_version_and_cipher_suite.enabled"
                Value: "false"

    ElasticLoadBalancingV2Listener:
        Type: "AWS::ElasticLoadBalancingV2::Listener"
        Properties:
            LoadBalancerArn: !Ref ElasticLoadBalancingV2LoadBalancer
            Port: 80
            Protocol: "HTTP"
            DefaultActions: 
              - 
                Order: 1
                TargetGroupArn: !Ref ElasticLoadBalancingV2TargetGroup
                Type: "forward"

    EC2SecurityGroup2:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "Grupo de Seguranca para o APL do Humhub"
            GroupName: "SG_ELB_humhub"
            Tags: 
              - 
                Key: "projeto"
                Value: "projeto13_grupo06-humhub"
            VpcId: !Ref EC2VPC
            SecurityGroupIngress: 
              - 
                CidrIp: "0.0.0.0/0"
                FromPort: 80
                IpProtocol: "tcp"
                ToPort: 80
              - 
                CidrIp: "0.0.0.0/0"
                FromPort: 443
                IpProtocol: "tcp"
                ToPort: 443
            SecurityGroupEgress: 
              - 
                CidrIp: "0.0.0.0/0"
                IpProtocol: "-1"

    EC2SecurityGroup6:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "Security Group para tasks do humhub"
            GroupName: "sg_web_humhub"
            VpcId: !Ref EC2VPC
            SecurityGroupIngress: 
              - 
                CidrIp: "0.0.0.0/0"
                FromPort: 80
                IpProtocol: "tcp"
                ToPort: 80
              - 
                CidrIpv6: "::/0"
                FromPort: 80
                IpProtocol: "tcp"
                ToPort: 80
              - 
                CidrIp: "0.0.0.0/0"
                FromPort: 443
                IpProtocol: "tcp"
                ToPort: 443
              - 
                CidrIpv6: "::/0"
                FromPort: 443
                IpProtocol: "tcp"
                ToPort: 443
            SecurityGroupEgress: 
              - 
                CidrIp: "0.0.0.0/0"
                IpProtocol: "-1"
              - 
                CidrIpv6: "::/0"
                IpProtocol: "-1"

    EC2SecurityGroupEFS:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "xxx"
            GroupName: "sg_efs_humhub"
            Tags: 
              - 
                Key: "projeto"
                Value: "projeto13_grupo06-humhub"
            VpcId: !Ref EC2VPC
            SecurityGroupIngress: 
              - 
                CidrIp: !GetAtt EC2VPC.CidrBlock
                FromPort: 2049
                IpProtocol: "tcp"
                ToPort: 2049
            SecurityGroupEgress: 
              - 
                CidrIp: "0.0.0.0/0"
                IpProtocol: "-1"
              - 
                CidrIpv6: "::/0"
                IpProtocol: "-1"

    ElasticLoadBalancingV2TargetGroup:
        Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
        Properties:
            HealthCheckIntervalSeconds: 30
            HealthCheckPath: "/user/auth/login"
            Port: 80
            Protocol: "HTTP"
            HealthCheckPort: "traffic-port"
            HealthCheckProtocol: "HTTP"
            HealthCheckTimeoutSeconds: 5
            UnhealthyThresholdCount: 2
            TargetType: "ip"
            Matcher: 
                HttpCode: "200"
            HealthyThresholdCount: 5
            VpcId: !Ref EC2VPC
            Name: "gd-humhub-tecnoct"
            HealthCheckEnabled: true
            TargetGroupAttributes: 
              - 
                Key: "target_group_health.unhealthy_state_routing.minimum_healthy_targets.count"
                Value: "1"
              - 
                Key: "stickiness.enabled"
                Value: "false"
              - 
                Key: "target_group_health.unhealthy_state_routing.minimum_healthy_targets.percentage"
                Value: "off"
              - 
                Key: "deregistration_delay.timeout_seconds"
                Value: "300"
              - 
                Key: "target_group_health.dns_failover.minimum_healthy_targets.count"
                Value: "1"
              - 
                Key: "stickiness.app_cookie.cookie_name"
                Value: ""
              - 
                Key: "stickiness.type"
                Value: "lb_cookie"
              - 
                Key: "stickiness.lb_cookie.duration_seconds"
                Value: "86400"
              - 
                Key: "slow_start.duration_seconds"
                Value: "0"
              - 
                Key: "stickiness.app_cookie.duration_seconds"
                Value: "86400"
              - 
                Key: "target_group_health.dns_failover.minimum_healthy_targets.percentage"
                Value: "off"
              - 
                Key: "load_balancing.cross_zone.enabled"
                Value: "use_load_balancer_configuration"
              - 
                Key: "load_balancing.algorithm.type"
                Value: "round_robin"
            Targets: 
              - 
                Id: "10.0.3.165"
                Port: 80
                AvailabilityZone: !GetAtt EC2Subnet.AvailabilityZone
              - 
                Id: "10.0.4.203"
                Port: 80
                AvailabilityZone: !GetAtt EC2Subnet2.AvailabilityZone

    EC2NetworkInterface2:
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: !Sub "ELB app/${ElasticLoadBalancingV2LoadBalancer.LoadBalancerName}/76647e729d1ca177"
            SubnetId: !Ref EC2Subnet3
            SourceDestCheck: true
            GroupSet: 
              - !Ref EC2SecurityGroup2

    EC2NetworkInterface13:
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: !Sub "ELB app/${ElasticLoadBalancingV2LoadBalancer.LoadBalancerName}/76647e729d1ca177"
            SubnetId: !Ref EC2Subnet2
            SourceDestCheck: true
            GroupSet: 
              - !Ref EC2SecurityGroup2

# TODO EFS
    EFSFileSystem2:
        Type: "AWS::EFS::FileSystem"
        Properties:
            PerformanceMode: "generalPurpose"
            Encrypted: true
            ThroughputMode: "elastic"
            FileSystemTags: 
              - 
                Key: "Name"
                Value: "efs-humhub"

    EFSMountTarget3:
        Type: "AWS::EFS::MountTarget"
        Properties:
            FileSystemId: !Ref EFSFileSystem2
            SecurityGroups: 
              - !Ref EC2SecurityGroupEFS
            SubnetId: !Ref EC2Subnet4

    EFSMountTarget4:
        Type: "AWS::EFS::MountTarget"
        Properties:
            FileSystemId: !Ref EFSFileSystem2
            SecurityGroups: 
              - !Ref EC2SecurityGroupEFS
            SubnetId: !Ref EC2Subnet

# TODO RDS
    EC2SecurityGroupRDS:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "Grupo de Seguranca para o RDS do Humhub"
            GroupName: "SG_RDS_humhub"
            Tags: 
              - 
                Key: "projeto"
                Value: "projeto13_grupo06-humhub"
            VpcId: !Ref EC2VPC
            SecurityGroupIngress: 
              - 
                CidrIp: "0.0.0.0/0"
                FromPort: 3306
                IpProtocol: "tcp"
                ToPort: 3306
              - 
                CidrIpv6: "::/0"
                FromPort: 3306
                IpProtocol: "tcp"
                ToPort: 3306
            SecurityGroupEgress: 
              - 
                CidrIp: "0.0.0.0/0"
                IpProtocol: "-1"
              - 
                CidrIpv6: "::/0"
                IpProtocol: "-1"

    RDSDBInstance:
        Type: "AWS::RDS::DBInstance"
        Properties:
            DBInstanceIdentifier: "database-tecnoct"
            AllocatedStorage: 50
            DBInstanceClass: "db.t3.micro"
            Engine: "mysql"
            MasterUsername: "root"
            MasterUserPassword: "humhub2023"
            DBName: "db_humhub"
            PreferredBackupWindow: "07:09-07:39"
            BackupRetentionPeriod: 0
            AvailabilityZone: !GetAtt EC2Subnet.AvailabilityZone
            PreferredMaintenanceWindow: "sat:04:21-sat:04:51"
            MultiAZ: false
            EngineVersion: "8.0.33"
            AutoMinorVersionUpgrade: true
            LicenseModel: "general-public-license"
            PubliclyAccessible: true
            StorageType: "gp3"
            Port: 3306
            StorageEncrypted: true
            CopyTagsToSnapshot: true
            MonitoringInterval: 0
            EnableIAMDatabaseAuthentication: false
            EnablePerformanceInsights: false
            DeletionProtection: false
            DBSubnetGroupName: !Sub "default-${EC2VPC}"
            VPCSecurityGroups: 
              - !Ref EC2SecurityGroupRDS
            MaxAllocatedStorage: 1000
            DBParameterGroupName: "default.mysql8.0"
            OptionGroupName: "default:mysql-8-0"
            CACertificateIdentifier: "rds-ca-2019"

    RDSDBSubnetGroup:
        Type: "AWS::RDS::DBSubnetGroup"
        Properties:
            DBSubnetGroupDescription: "Created from the RDS Management Console"
            DBSubnetGroupName: !Sub "default-${EC2VPC}"
            SubnetIds: 
              - !Ref EC2Subnet
              - !Ref EC2Subnet2
              - !Ref EC2Subnet3
              - !Ref EC2Subnet4

# TODO ECS
    IAMRole2:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/"
            RoleName: "ecsTaskExecutionRole-0001"
            AssumeRolePolicyDocument: "{\"Version\":\"2008-10-17\",\"Statement\":[{\"Sid\":\"\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"ecs-tasks.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns: 
              - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"

    ECSCluster:
        Type: "AWS::ECS::Cluster"
        Properties:
            ClusterName: "ecs-fargate-humhub-cluster"
            CapacityProviders: 
              - "FARGATE"
              - "FARGATE_SPOT"

    ECSService:
        Type: "AWS::ECS::Service"
        Properties:
            ServiceName: "service-fargate-humhub-tecnoct"
            Cluster: !GetAtt ECSCluster.Arn
            LoadBalancers: 
              - 
                TargetGroupArn: !Ref ElasticLoadBalancingV2TargetGroup
                ContainerName: "ecr-image-humhub"
                ContainerPort: 80
            DesiredCount: 2
            PlatformVersion: "LATEST"
            TaskDefinition: !Ref ECSTaskDefinition
            DeploymentConfiguration: 
                MaximumPercent: 200
                MinimumHealthyPercent: 100
                DeploymentCircuitBreaker: 
                    Enable: true
                    Rollback: true
            Role: "arn:aws:iam::891856990808:role/aws-service-role/ecs.amazonaws.com/AWSServiceRoleForECS"
            NetworkConfiguration: 
                AwsvpcConfiguration: 
                    AssignPublicIp: "DISABLED"
                    SecurityGroups: 
                      - !Ref EC2SecurityGroup6
                    Subnets: 
                      - !Ref EC2Subnet
                      - !Ref EC2Subnet4
            HealthCheckGracePeriodSeconds: 0
            SchedulingStrategy: "REPLICA"
            DeploymentController: 
                Type: "ECS"
            CapacityProviderStrategy: 
              - 
                CapacityProvider: "FARGATE"
                Weight: 1
                Base: 0

    ECSTaskDefinition:
        Type: "AWS::ECS::TaskDefinition"
        Properties:
            ContainerDefinitions: 
              - 
                Environment: 
                  - 
                    Name: "HUMHUB_DB_USER"
                    Value: "root"
                  - 
                    Name: "HUMHUB_DB_HOST"
                    Value: !GetAtt RDSDBInstance.Endpoint.Address
                  - 
                    Name: "HUMHUB_DB_NAME"
                    Value: "db_humhub"
                  - 
                    Name: "HUMHUB_AUTO_INSTALL"
                    Value: "0"
                  - 
                    Name: "HUMHUB_ADMIN_PASSWORD"
                    Value: "admin"
                  - 
                    Name: "HUMHUB_DB_PASSWORD"
                    Value: "humhub2023"
                  - 
                    Name: "HUMHUB_ADMIN_EMAIL"
                    Value: "humhub@humhub.com"
                  - 
                    Name: "HUMHUB_ADMIN_LOGIN"
                    Value: "admin"
                Essential: true
                Image: "mriedmann/humhub"
                # Image: !Sub "891856990808.dkr.ecr.${AWS::Region}.amazonaws.com/projeto_humhub"
                LogConfiguration: 
                    LogDriver: "awslogs"
                    Options: 
                        awslogs-create-group: "true"
                        awslogs-group: "/ecs/task-definition-fargate-humhubr"
                        awslogs-region: !Ref AWS::Region
                        awslogs-stream-prefix: "ecs"
                MountPoints: 
                  - 
                    SourceVolume: "config"
                    ContainerPath: "/var/www/localhost/htdocs/protected/config"
                    ReadOnly: false
                  - 
                    SourceVolume: "uploads"
                    ContainerPath: "/var/www/localhost/htdocs/uploads"
                    ReadOnly: false
                  - 
                    SourceVolume: "modules"
                    ContainerPath: "/var/www/localhost/htdocs/protected/modules"
                    ReadOnly: false
                Name: "ecr-image-humhub"
                PortMappings: 
                  - 
                    ContainerPort: 80
                    HostPort: 80
                    Protocol: "tcp"
            Family: "task-definition-fargate-humhubr"
            ExecutionRoleArn: !GetAtt IAMRole2.Arn
            NetworkMode: "awsvpc"
            Volumes: 
              - 
                Name: "config"
                DockerVolumeConfiguration: 
                    FilesystemId: !Ref EFSFileSystem2
                    RootDirectory: "/"
              - 
                Name: "uploads"
                DockerVolumeConfiguration: 
                    FilesystemId: !Ref EFSFileSystem2
                    RootDirectory: "/"
              - 
                Name: "modules"
                DockerVolumeConfiguration: 
                    FilesystemId: !Ref EFSFileSystem2
                    RootDirectory: "/"
            RequiresCompatibilities: 
              - "FARGATE"
            Cpu: "1024"
            Memory: "2048"

    ApplicationAutoScalingScalableTarget:
        Type: "AWS::ApplicationAutoScaling::ScalableTarget"
        Properties:
            MaxCapacity: 6
            MinCapacity: 2
            ResourceId: !Sub "service/${ECSCluster}/${ECSService.Name}"
            RoleARN: "arn:aws:iam::891856990808:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService"
            ScalableDimension: "ecs:service:DesiredCount"
            ServiceNamespace: "ecs"
            SuspendedState: 
                DynamicScalingInSuspended: false
                DynamicScalingOutSuspended: false
                ScheduledScalingSuspended: false

    ApplicationAutoScalingScalingPolicy:
        Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
        Properties:
            PolicyName: "policy_humhub_cpu_utilization"
            PolicyType: "TargetTrackingScaling"
            ResourceId: !Sub "service/${ECSCluster}/${ECSService.Name}"
            ScalableDimension: "ecs:service:DesiredCount"
            ServiceNamespace: "ecs"
            TargetTrackingScalingPolicyConfiguration: 
                DisableScaleIn: false
                PredefinedMetricSpecification: 
                    PredefinedMetricType: "ECSServiceAverageCPUUtilization"
                TargetValue: 50

    ServiceDiscoveryHttpNamespace:
        Type: "AWS::ServiceDiscovery::HttpNamespace"
        Properties:
            Name: !Ref ECSCluster
